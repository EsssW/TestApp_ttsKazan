//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientInterface.MyService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MousEvent", Namespace="http://schemas.datacontract.org/2004/07/TestApp")]
    [System.SerializableAttribute()]
    public partial class MousEvent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string eventNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string eventTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<ushort> mousX_posField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<ushort> mousY_posField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientInterface.MyService.ServerUser userField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string eventName {
            get {
                return this.eventNameField;
            }
            set {
                if ((object.ReferenceEquals(this.eventNameField, value) != true)) {
                    this.eventNameField = value;
                    this.RaisePropertyChanged("eventName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string eventTime {
            get {
                return this.eventTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.eventTimeField, value) != true)) {
                    this.eventTimeField = value;
                    this.RaisePropertyChanged("eventTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> mousX_pos {
            get {
                return this.mousX_posField;
            }
            set {
                if ((this.mousX_posField.Equals(value) != true)) {
                    this.mousX_posField = value;
                    this.RaisePropertyChanged("mousX_pos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> mousY_pos {
            get {
                return this.mousY_posField;
            }
            set {
                if ((this.mousY_posField.Equals(value) != true)) {
                    this.mousY_posField = value;
                    this.RaisePropertyChanged("mousY_pos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientInterface.MyService.ServerUser user {
            get {
                return this.userField;
            }
            set {
                if ((object.ReferenceEquals(this.userField, value) != true)) {
                    this.userField = value;
                    this.RaisePropertyChanged("user");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerUser", Namespace="http://schemas.datacontract.org/2004/07/TestApp")]
    [System.SerializableAttribute()]
    public partial class ServerUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientInterface.MyService.MousEvent[] mousEventsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientInterface.MyService.MousEvent[] mousEvents {
            get {
                return this.mousEventsField;
            }
            set {
                if ((object.ReferenceEquals(this.mousEventsField, value) != true)) {
                    this.mousEventsField = value;
                    this.RaisePropertyChanged("mousEvents");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AllUsersStatistic", Namespace="http://schemas.datacontract.org/2004/07/TestApp.DB")]
    [System.SerializableAttribute()]
    public partial class AllUsersStatistic : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int userEventsCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int userIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int userEventsCount {
            get {
                return this.userEventsCountField;
            }
            set {
                if ((this.userEventsCountField.Equals(value) != true)) {
                    this.userEventsCountField = value;
                    this.RaisePropertyChanged("userEventsCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int userId {
            get {
                return this.userIdField;
            }
            set {
                if ((this.userIdField.Equals(value) != true)) {
                    this.userIdField = value;
                    this.RaisePropertyChanged("userId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userNameField, value) != true)) {
                    this.userNameField = value;
                    this.RaisePropertyChanged("userName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserStatistic", Namespace="http://schemas.datacontract.org/2004/07/TestApp.DB")]
    [System.SerializableAttribute()]
    public partial class UserStatistic : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string dateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort mousX_posField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort mousY_posField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventTypeName {
            get {
                return this.EventTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EventTypeNameField, value) != true)) {
                    this.EventTypeNameField = value;
                    this.RaisePropertyChanged("EventTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string dateTime {
            get {
                return this.dateTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.dateTimeField, value) != true)) {
                    this.dateTimeField = value;
                    this.RaisePropertyChanged("dateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort mousX_pos {
            get {
                return this.mousX_posField;
            }
            set {
                if ((this.mousX_posField.Equals(value) != true)) {
                    this.mousX_posField = value;
                    this.RaisePropertyChanged("mousX_pos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort mousY_pos {
            get {
                return this.mousY_posField;
            }
            set {
                if ((this.mousY_posField.Equals(value) != true)) {
                    this.mousY_posField = value;
                    this.RaisePropertyChanged("mousY_pos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyService.IMouseEventContract")]
    public interface IMouseEventContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/StartRecording", ReplyAction="http://tempuri.org/IMouseEventContract/StartRecordingResponse")]
        void StartRecording(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/StartRecording", ReplyAction="http://tempuri.org/IMouseEventContract/StartRecordingResponse")]
        System.Threading.Tasks.Task StartRecordingAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/StopRecording", ReplyAction="http://tempuri.org/IMouseEventContract/StopRecordingResponse")]
        void StopRecording(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/StopRecording", ReplyAction="http://tempuri.org/IMouseEventContract/StopRecordingResponse")]
        System.Threading.Tasks.Task StopRecordingAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/GetRecordingStatus", ReplyAction="http://tempuri.org/IMouseEventContract/GetRecordingStatusResponse")]
        bool GetRecordingStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/GetRecordingStatus", ReplyAction="http://tempuri.org/IMouseEventContract/GetRecordingStatusResponse")]
        System.Threading.Tasks.Task<bool> GetRecordingStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/GetMousEvents", ReplyAction="http://tempuri.org/IMouseEventContract/GetMousEventsResponse")]
        ClientInterface.MyService.MousEvent[] GetMousEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/GetMousEvents", ReplyAction="http://tempuri.org/IMouseEventContract/GetMousEventsResponse")]
        System.Threading.Tasks.Task<ClientInterface.MyService.MousEvent[]> GetMousEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/GetMousEventById", ReplyAction="http://tempuri.org/IMouseEventContract/GetMousEventByIdResponse")]
        ClientInterface.MyService.MousEvent GetMousEventById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/GetMousEventById", ReplyAction="http://tempuri.org/IMouseEventContract/GetMousEventByIdResponse")]
        System.Threading.Tasks.Task<ClientInterface.MyService.MousEvent> GetMousEventByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/AddNewMousEvent", ReplyAction="http://tempuri.org/IMouseEventContract/AddNewMousEventResponse")]
        void AddNewMousEvent(ClientInterface.MyService.MousEvent mousEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/AddNewMousEvent", ReplyAction="http://tempuri.org/IMouseEventContract/AddNewMousEventResponse")]
        System.Threading.Tasks.Task AddNewMousEventAsync(ClientInterface.MyService.MousEvent mousEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/RemoveMousEvent", ReplyAction="http://tempuri.org/IMouseEventContract/RemoveMousEventResponse")]
        bool RemoveMousEvent(ClientInterface.MyService.MousEvent mousEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/RemoveMousEvent", ReplyAction="http://tempuri.org/IMouseEventContract/RemoveMousEventResponse")]
        System.Threading.Tasks.Task<bool> RemoveMousEventAsync(ClientInterface.MyService.MousEvent mousEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/UpdateMousEvent", ReplyAction="http://tempuri.org/IMouseEventContract/UpdateMousEventResponse")]
        bool UpdateMousEvent(int id, ClientInterface.MyService.MousEvent mousEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/UpdateMousEvent", ReplyAction="http://tempuri.org/IMouseEventContract/UpdateMousEventResponse")]
        System.Threading.Tasks.Task<bool> UpdateMousEventAsync(int id, ClientInterface.MyService.MousEvent mousEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/GetMyMousEventCount", ReplyAction="http://tempuri.org/IMouseEventContract/GetMyMousEventCountResponse")]
        int GetMyMousEventCount(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/GetMyMousEventCount", ReplyAction="http://tempuri.org/IMouseEventContract/GetMyMousEventCountResponse")]
        System.Threading.Tasks.Task<int> GetMyMousEventCountAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/SignIn", ReplyAction="http://tempuri.org/IMouseEventContract/SignInResponse")]
        int SignIn(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/SignIn", ReplyAction="http://tempuri.org/IMouseEventContract/SignInResponse")]
        System.Threading.Tasks.Task<int> SignInAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/Registration", ReplyAction="http://tempuri.org/IMouseEventContract/RegistrationResponse")]
        bool Registration(ClientInterface.MyService.ServerUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/Registration", ReplyAction="http://tempuri.org/IMouseEventContract/RegistrationResponse")]
        System.Threading.Tasks.Task<bool> RegistrationAsync(ClientInterface.MyService.ServerUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/IsAdmin", ReplyAction="http://tempuri.org/IMouseEventContract/IsAdminResponse")]
        bool IsAdmin(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/IsAdmin", ReplyAction="http://tempuri.org/IMouseEventContract/IsAdminResponse")]
        System.Threading.Tasks.Task<bool> IsAdminAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/SendEmail", ReplyAction="http://tempuri.org/IMouseEventContract/SendEmailResponse")]
        bool SendEmail(int userId, string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/SendEmail", ReplyAction="http://tempuri.org/IMouseEventContract/SendEmailResponse")]
        System.Threading.Tasks.Task<bool> SendEmailAsync(int userId, string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/SendSms", ReplyAction="http://tempuri.org/IMouseEventContract/SendSmsResponse")]
        bool SendSms(int userId, string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/SendSms", ReplyAction="http://tempuri.org/IMouseEventContract/SendSmsResponse")]
        System.Threading.Tasks.Task<bool> SendSmsAsync(int userId, string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/GetUsersStatistic", ReplyAction="http://tempuri.org/IMouseEventContract/GetUsersStatisticResponse")]
        ClientInterface.MyService.AllUsersStatistic[] GetUsersStatistic();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/GetUsersStatistic", ReplyAction="http://tempuri.org/IMouseEventContract/GetUsersStatisticResponse")]
        System.Threading.Tasks.Task<ClientInterface.MyService.AllUsersStatistic[]> GetUsersStatisticAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/GetUserStatisticById", ReplyAction="http://tempuri.org/IMouseEventContract/GetUserStatisticByIdResponse")]
        ClientInterface.MyService.UserStatistic[] GetUserStatisticById(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMouseEventContract/GetUserStatisticById", ReplyAction="http://tempuri.org/IMouseEventContract/GetUserStatisticByIdResponse")]
        System.Threading.Tasks.Task<ClientInterface.MyService.UserStatistic[]> GetUserStatisticByIdAsync(int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMouseEventContractChannel : ClientInterface.MyService.IMouseEventContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MouseEventContractClient : System.ServiceModel.ClientBase<ClientInterface.MyService.IMouseEventContract>, ClientInterface.MyService.IMouseEventContract {
        
        public MouseEventContractClient() {
        }
        
        public MouseEventContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MouseEventContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MouseEventContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MouseEventContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void StartRecording(int userId) {
            base.Channel.StartRecording(userId);
        }
        
        public System.Threading.Tasks.Task StartRecordingAsync(int userId) {
            return base.Channel.StartRecordingAsync(userId);
        }
        
        public void StopRecording(int userId) {
            base.Channel.StopRecording(userId);
        }
        
        public System.Threading.Tasks.Task StopRecordingAsync(int userId) {
            return base.Channel.StopRecordingAsync(userId);
        }
        
        public bool GetRecordingStatus() {
            return base.Channel.GetRecordingStatus();
        }
        
        public System.Threading.Tasks.Task<bool> GetRecordingStatusAsync() {
            return base.Channel.GetRecordingStatusAsync();
        }
        
        public ClientInterface.MyService.MousEvent[] GetMousEvents() {
            return base.Channel.GetMousEvents();
        }
        
        public System.Threading.Tasks.Task<ClientInterface.MyService.MousEvent[]> GetMousEventsAsync() {
            return base.Channel.GetMousEventsAsync();
        }
        
        public ClientInterface.MyService.MousEvent GetMousEventById(int id) {
            return base.Channel.GetMousEventById(id);
        }
        
        public System.Threading.Tasks.Task<ClientInterface.MyService.MousEvent> GetMousEventByIdAsync(int id) {
            return base.Channel.GetMousEventByIdAsync(id);
        }
        
        public void AddNewMousEvent(ClientInterface.MyService.MousEvent mousEvent) {
            base.Channel.AddNewMousEvent(mousEvent);
        }
        
        public System.Threading.Tasks.Task AddNewMousEventAsync(ClientInterface.MyService.MousEvent mousEvent) {
            return base.Channel.AddNewMousEventAsync(mousEvent);
        }
        
        public bool RemoveMousEvent(ClientInterface.MyService.MousEvent mousEvent) {
            return base.Channel.RemoveMousEvent(mousEvent);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveMousEventAsync(ClientInterface.MyService.MousEvent mousEvent) {
            return base.Channel.RemoveMousEventAsync(mousEvent);
        }
        
        public bool UpdateMousEvent(int id, ClientInterface.MyService.MousEvent mousEvent) {
            return base.Channel.UpdateMousEvent(id, mousEvent);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMousEventAsync(int id, ClientInterface.MyService.MousEvent mousEvent) {
            return base.Channel.UpdateMousEventAsync(id, mousEvent);
        }
        
        public int GetMyMousEventCount(int id) {
            return base.Channel.GetMyMousEventCount(id);
        }
        
        public System.Threading.Tasks.Task<int> GetMyMousEventCountAsync(int id) {
            return base.Channel.GetMyMousEventCountAsync(id);
        }
        
        public int SignIn(string login, string password) {
            return base.Channel.SignIn(login, password);
        }
        
        public System.Threading.Tasks.Task<int> SignInAsync(string login, string password) {
            return base.Channel.SignInAsync(login, password);
        }
        
        public bool Registration(ClientInterface.MyService.ServerUser user) {
            return base.Channel.Registration(user);
        }
        
        public System.Threading.Tasks.Task<bool> RegistrationAsync(ClientInterface.MyService.ServerUser user) {
            return base.Channel.RegistrationAsync(user);
        }
        
        public bool IsAdmin(int id) {
            return base.Channel.IsAdmin(id);
        }
        
        public System.Threading.Tasks.Task<bool> IsAdminAsync(int id) {
            return base.Channel.IsAdminAsync(id);
        }
        
        public bool SendEmail(int userId, string msg) {
            return base.Channel.SendEmail(userId, msg);
        }
        
        public System.Threading.Tasks.Task<bool> SendEmailAsync(int userId, string msg) {
            return base.Channel.SendEmailAsync(userId, msg);
        }
        
        public bool SendSms(int userId, string msg) {
            return base.Channel.SendSms(userId, msg);
        }
        
        public System.Threading.Tasks.Task<bool> SendSmsAsync(int userId, string msg) {
            return base.Channel.SendSmsAsync(userId, msg);
        }
        
        public ClientInterface.MyService.AllUsersStatistic[] GetUsersStatistic() {
            return base.Channel.GetUsersStatistic();
        }
        
        public System.Threading.Tasks.Task<ClientInterface.MyService.AllUsersStatistic[]> GetUsersStatisticAsync() {
            return base.Channel.GetUsersStatisticAsync();
        }
        
        public ClientInterface.MyService.UserStatistic[] GetUserStatisticById(int userId) {
            return base.Channel.GetUserStatisticById(userId);
        }
        
        public System.Threading.Tasks.Task<ClientInterface.MyService.UserStatistic[]> GetUserStatisticByIdAsync(int userId) {
            return base.Channel.GetUserStatisticByIdAsync(userId);
        }
    }
}
